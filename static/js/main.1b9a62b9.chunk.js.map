{"version":3,"sources":["LinearGradient.js","App.js","serviceWorker.js","index.js"],"names":["LinearGradient","props","data","boxStyle","width","margin","gradientStyle","backgroundImage","fromColor","toColor","height","style","className","min","max","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","COLOR_RANGE","geographyStyle","default","outline","hover","fill","transition","pressed","App","useState","tooltipContent","setTooltipContent","React","setData","gradientData","length","reduce","item","value","colorScale","scaleQuantile","domain","map","d","range","onMouseEnter","geo","current","properties","name","onMouseLeave","useEffect","fetch","then","res","json","arr","ress","statewise","ds","push","state","confirmed","i","id","console","log","List","projectionConfig","projection","data-tip","geography","geographies","find","s","key","rsmKey","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b9a62b9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LinearGradient = props => {\n  const { data } = props;\n  const boxStyle = {\n    width: 180,\n    margin: 'auto'\n  };\n  const gradientStyle = {\n    backgroundImage: `linear-gradient(to right, ${data.fromColor} , ${data.toColor})`,\n    height: 20\n  };\n  return (\n    <div>\n      <div style={boxStyle} className=\"display-flex\">\n        <span>{data.min}</span>\n        <span className=\"fill\"></span>\n        <span>{data.max}</span>\n      </div>\n      <div style={{ ...boxStyle, ...gradientStyle }} className=\"mt8\"></div>\n    </div>\n  );\n};\n\nLinearGradient.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nexport default LinearGradient;\n","import React, { useState, useEffect } from \"react\";\n\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { scaleQuantile } from 'd3-scale';\nimport ReactTooltip from 'react-tooltip';\n\nimport LinearGradient from './LinearGradient.js';\nimport './App.css';\n\n\n/**\n* Courtesy: https://rawgit.com/Anujarya300/bubble_maps/master/data/geography-data/india.topo.json\n* Looking topojson for other countries/world?\n* Visit: https://github.com/markmarkoh/datamaps\n*/\nconst INDIA_TOPO_JSON = require('./india.topo.json');\n\nconst PROJECTION_CONFIG = {\n  scale: 350,\n  center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\n};\n\n// Red Variants\nconst COLOR_RANGE = [\n  '#ffd4cc',\n  '#ffbeb3',\n  '#ffa899',\n  '#ff9380',\n  '#ff7d66',\n  '#ff7d66',\n  '#ff5233',\n  '#ff3c1a',\n  '#b31b00',\n  '#660f00'\n];\n\nconst DEFAULT_COLOR = '#EEE';\n\nconst getRandomInt = () => {\n  return parseInt(Math.random() * 100);\n};\n\nconst geographyStyle = {\n  default: {\n    outline: 'none'\n  },\n  hover: {\n    fill: '#ccc',\n    transition: 'all 250ms',\n    outline: 'none'\n  },\n  pressed: {\n    outline: 'none'\n  }\n};\n\n// will generate random heatmap data on every call\nconst getHeatMapData = (d) => {\n\n  return [\n    { id: 'AP', state: 'Andhra Pradesh', value: 1 },\n    { id: 'AR', state: 'Arunachal Pradesh', value: getRandomInt() },\n    { id: 'AS', state: 'Assam', value: getRandomInt() },\n    { id: 'BR', state: 'Bihar', value: getRandomInt() },\n    { id: 'CT', state: 'Chhattisgarh', value: getRandomInt() },\n    { id: 'GA', state: 'Goa', value: 21 },\n    { id: 'GJ', state: 'Gujarat', value: 22 },\n    { id: 'HR', state: 'Haryana', value: getRandomInt() },\n    { id: 'HP', state: 'Himachal Pradesh', value: 24 },\n    { id: 'JH', state: 'Jharkhand', value: 26 },\n    { id: 'KA', state: 'Karnataka', value: 27 },\n    { id: 'KL', state: 'Kerala', value: getRandomInt() },\n    { id: 'MP', state: 'Madhya Pradesh', value: getRandomInt() },\n    { id: 'MH', state: 'Maharashtra', value: getRandomInt() },\n    { id: 'MN', state: 'Manipur', value: getRandomInt() },\n    { id: 'ML', state: 'Meghalaya', value: 59 },\n    { id: 'MZ', state: 'Mizoram', value: getRandomInt() },\n    { id: 'NL', state: 'Nagaland', value: 59 },\n    { id: 'OR', state: 'Odisha', value: 59 },\n    { id: 'PB', state: 'Punjab', value: getRandomInt() },\n    { id: 'RJ', state: 'Rajasthan', value: getRandomInt() },\n    { id: 'SK', state: 'Sikkim', value: getRandomInt() },\n    { id: 'TN', state: 'Tamil Nadu', value: getRandomInt() },\n    { id: 'TG', state: 'Telangana', value: getRandomInt() },\n    { id: 'TR', state: 'Tripura', value: 14 },\n    { id: 'UT', state: 'Uttarakhand', value: getRandomInt() },\n    { id: 'UP', state: 'Uttar Pradesh', value: 15 },\n    { id: 'WB', state: 'West Bengal', value: 17 },\n    { id: 'WB', state: 'West Bengal', value: 17 },\n    { id: 'AN', state: 'Andaman and Nicobar Islands', value: getRandomInt() },\n    { id: 'CH', state: 'Chandigarh', value: getRandomInt() },\n    { id: 'DN', state: 'Dadra and Nagar Haveli', value: 19 },\n    { id: 'DD', state: 'Daman and Diu', value: 20 },\n    { id: 'DL', state: 'Delhi', value: 59 },\n    { id: 'JK', state: 'Jammu and Kashmir', value: 25 },\n    { id: 'LA', state: 'Ladakh', value: getRandomInt() },\n    { id: 'LD', state: 'Lakshadweep', value: getRandomInt() },\n    { id: 'AP', state: 'Puducherry', value: 1 }\n  ];\n};\n\nfunction App() {\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [commitHistory, setCommitHistory] = useState([]);\n  const [firstName, setFirstName] = React.useState(null);\n  const [lastName, setLastName] = React.useState(null);\n\n  const [data, setData] = useState([]);\n\n\n  const gradientData = {\n    fromColor: COLOR_RANGE[0],\n    toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\n    min: 0,\n    max: data.reduce((max, item) => (item.value > max ? item.value : max), 0)\n  };\n\n  const colorScale = scaleQuantile()\n    .domain(data.map(d => d.value))\n    .range(COLOR_RANGE);\n\n  const onMouseEnter = (geo, current = { value: 'NA' }) => {\n    return () => {\n      setTooltipContent(`${geo.properties.name}: ${current.value}`);\n    };\n  };\n\n  const onMouseLeave = () => {\n    setTooltipContent('');\n  };\n\n  const onChangeButtonClick = () => {\n    setData([\n      { id: 'AP', state: 'Andhra Pradesh', value: 2}]);\n  };\n\n\n\n  React.useEffect(() => {\n   fetch('https://api.rootnet.in/covid19-in/unofficial/covid19india.org/statewise')\n     .then(res => res.json())\n     .then(d => {\n       const {name} = d;\n\n\nsetData(List(d));\n\n     });\n }, []);\n\n\n\n  return (\n    <div className=\"full-width-height container\">\n      <h5 className=\"no-margin center\">COVID-19 India</h5>\n\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n        <ComposableMap\n          projectionConfig={PROJECTION_CONFIG}\n          projection=\"geoMercator\"\n          width={600}\n          height={220}\n          data-tip=\"\"\n        >\n          <Geographies geography={INDIA_TOPO_JSON}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                //console.log(geo.id);\n                const current = data.find(s => s.id === geo.id);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill={current ? colorScale(current.value) : DEFAULT_COLOR}\n                    style={geographyStyle}\n                    onMouseEnter={onMouseEnter(geo, current)}\n                    onMouseLeave={onMouseLeave}\n                  />\n                );\n              })\n\n            }\n          </Geographies>\n        </ComposableMap>\n        <LinearGradient data={gradientData} />\n\n\n\n\n        <div className=\"center\">\n          <button className=\"mt16\" onClick={onChangeButtonClick}>Change</button>\n        </div>\n    </div>\n  );\n}\nfunction List(d) {\nvar arr = [];\nvar ress=[];\nd.data.statewise.map(ds => (\n\n\n      arr.push([ds.state,ds.confirmed])\n\n\n  ))\n\n  for (var i = 0; i < arr.length; i++) {\n\n    if(arr[i][0]==='Maharashtra')\n    {\n      ress.push({ id: 'MH', state: 'Maharashtra', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Tamil Nadu')\n    {\n      ress.push({ id: 'TN', state: 'Tamil Nadu', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Kerala')\n    {\n      ress.push({ id: 'KL', state: 'Kerala', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Madhya Pradesh')\n    {\n      ress.push({ id: 'MP', state: 'Madhya Pradesh', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Delhi')\n    {\n      ress.push({ id: 'DL', state: 'Delhi', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Karnataka')\n    {\n      ress.push({ id: 'KA', state: 'Karnataka', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Rajasthan')\n    {\n      ress.push({ id: 'RJ', state: 'Rajasthan', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Chhattisgarh')\n    {\n      ress.push({ id: 'CT', state: 'Chhattisgarh', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Telangana')\n    {\n      ress.push({ id: 'TS', state: 'Telangana', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Uttar Pradesh')\n    {\n      ress.push({ id: 'UP', state: 'Uttar Pradesh', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Odisha')\n    {\n      ress.push({ id: 'OD', state: 'Odisha', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Jharkhand')\n    {\n      ress.push({ id: 'JH', state: 'Jharkhand', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Punjab')\n    {\n      ress.push({ id: 'PB', state: 'Punjab', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Gujarat')\n    {\n      ress.push({ id: 'GJ', state: 'Gujarat', value: arr[i][1]})\n\n    }\n    else if(arr[i][0]==='Manipur')\n   {\n     ress.push({ id: 'MN', state: 'Manipur', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Meghalaya')\n   {\n     ress.push({ id: 'ML', state: 'Meghalaya', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Mizoram')\n   {\n     ress.push({ id: 'MZ', state: 'Mizoram', value: arr[i][1]})\n\n   } else if(arr[i][0]==='Nagaland')\n   {\n     ress.push({ id: 'NL', state: 'Nagaland', value: arr[i][1]})\n\n   }\n\n   else if(arr[i][0]==='Andhra Pradesh')\n   {\n     ress.push({ id: 'AP', state: 'Andhra Pradesh', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='West Bengal')\n   {\n     ress.push({ id: 'WB', state: 'West Bengal', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Jammu and Kashmir')\n   {\n     ress.push({ id: 'JK', state: 'Telangana', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Himachal Pradesh')\n   {\n     ress.push({ id: 'HP', state: 'Himachal Pradesh', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Haryana')\n   {\n     ress.push({ id: 'HR', state: 'Haryana', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Uttarakhand')\n   {\n     ress.push({ id: 'UK', state: 'Uttarakhand', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Bihar')\n   {\n     ress.push({ id: 'BR', state: 'Bihar', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Tripura')\n   {\n     ress.push({ id: 'TR', state: 'Tripura', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Assam')\n   {\n     ress.push({ id: 'AS', state: 'Assam', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Goa')\n   {\n     ress.push({ id: 'GA', state: 'Goa', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Sikkim')\n   {\n     ress.push({ id: 'SK', state: 'Sikkim', value: arr[i][1]})\n\n   }\n   else if(arr[i][0]==='Arunachal Pradesh')\n   {\n     ress.push({ id: 'AR', state: 'Arunachal Pradesh', value: arr[i][1]})\n\n   }\n\n}\n\n  if (true) {\n\nconsole.log(ress)\n      return ress;\n  }\n\n\n\n\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}